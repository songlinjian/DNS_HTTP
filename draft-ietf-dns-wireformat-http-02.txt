



Internet Engineering Task Force                                  L. Song
Internet-Draft                                Beijing Internet Institute
Intended status: Experimental                                   P. Vixie
Expires: September 21, 2018                                         TISF
                                                                 S. Kerr
                                                          March 20, 2018


                       DNS wire-format over HTTP
                draft-ietf-dnsop-dns-wireformat-http-02

Abstract

   This memo introduces a way to tunnel DNS data over HTTP.  This may be
   useful in some situation where DNS is not working properly, such as
   when there is middlebox misbehavior.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 21, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Song, et al.           Expires September 21, 2018               [Page 1]

Internet-Draft          DNS wire-format over HTTP             March 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Methodology and Configuration . . . . . . . . . . . . . . . .   3
   3.  DNS-over-HTTP Message Format  . . . . . . . . . . . . . . . .   5
     3.1.  The HTTP Request  . . . . . . . . . . . . . . . . . . . .   5
     3.2.  DNS Wire Format . . . . . . . . . . . . . . . . . . . . .   6
     3.3.  The HTTP Response . . . . . . . . . . . . . . . . . . . .   7
   4.  Clarification on HTTP requirement . . . . . . . . . . . . . .   7
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   6.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .   8
   7.  IANA considerations . . . . . . . . . . . . . . . . . . . . .   9
     7.1.  Registration of application/dns-wireformat Media Type . .   9
     7.2.  Registration of dns-wireformat Well-Known URI . . . . . .  10
   8.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  10
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  10
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Introduction

   RFC 1035 [RFC1035] specifies the wire format for DNS messages.  It
   also specifies DNS transport on UDP and TCP on port 53, which is
   still used today.  To enhance the availability of honest DNS there
   are other ways to access DNS database, for example in a different
   data format[I-D.hoffman-dns-in-json] [I-D.mohan-dns-query-xml] or via
   alternative DNS transport [rfc7858][draft-ietf-doh-dns-over-https],
   because for along time, DNS suffered from on-path attack by spoofing
   and blocking.

   One of alternative way of accessing DNS proposed in this document is
   to ship DNS binary data inside HTTP, with the goal of improving DNS
   service availability.  It can bypass badly behaving middle boxes like
   firewalls, proxies or traffic shaping devices on path which might
   interfere with normal DNS traffic [RFC5625] [DOTSE] [SAC035].  This
   approach has the advantage that HTTP usually makes it through even
   the worst coffee shop or hotel room firewalls, as Internet users
   expect web browsing to always work.  It also benefits from HTTP's
   support for persistent TCP connections (see section 6.3 in
   [RFC7230]).  Finally, HTTPS is optionally deployed providing data
   integrity and privacy.

   Unlike a REST DNS API using JSON [I-D.bortzmeyer-dns-json] or XML
   [I-D.mohan-dns-query-xml] encoding for DNS data, in this approach
   wire-format data is wrapped with a HTTP header and transmitted on
   port 80 or 443.  The protocol is intended to serve as a sort of DNS
   VPN, and does not introduce another format of DNS data.





Song, et al.           Expires September 21, 2018               [Page 2]

Internet-Draft          DNS wire-format over HTTP             March 2018


   Different from [I-D.ietf-doh-dns-over-https] taking HTTPS as a native
   transport, HTTP here is used as a proxy layer.  In this protocol
   HTTPS and HTTP/2 [RFC7540] are recommended but not mandatory.

   Comparing using a general VPN, the DNS over HTTP wire format protocol
   presented here works on an actual HTTP server, so it can be hosted on
   a machine that also serves web pages.  This means that DNS over HTTP
   is slightly more "stealthy" than a VPN, in that it can be
   indistinguishable from normal web traffic.

   This memo aims to describe how the DNS binary over HTTP as a proxy
   layer concept works.  Hopefully implementations by different
   developers following this memo can speak with each other.

   Note that this mechanism is designed for client stub resolver to
   recursive server.  DNS zone transfer, DNS updates, and anything other
   than simple DNS queries are out-of-scope for this document.

2.  Methodology and Configuration

   As mentioned in introduction, the basic methodology of this proposal
   is to ship the DNS query and response via a established HTTP
   connection.  The DNS transaction is between normal DNS client and
   server.  No HTTP context is necessary visible for DNS loop.  Depend
   on how to deploy this protocol, there are two different scenarios.

   Scenario 1:

   The DNS with a proxy module which handles DNS queries and responses
   via HTTP on port 80 or 443.  It works as follows:

   1.  The client creates a DNS query in wire format defined in
       [RFC1035].

   2.  The client includes the DNS query as the message body of HTTP
       request and launches a HTTP connection to the server.  This may
       re-use an existing HTTP connection.

   3.  The server takes out the DNS query message, and resolves the DNS
       query.

   4.  The server includes the DNS response as the message body of HTTP
       response and sends it back via the previous HTTP session.

   Scenario 2:

   In this scenario there is a DNS-HTTP proxy sitting between stub-
   resolver and the recursive server.  The stub uses a client proxy and



Song, et al.           Expires September 21, 2018               [Page 3]

Internet-Draft          DNS wire-format over HTTP             March 2018


   the recursive server uses a server proxy.  This works like a DNS VPN
   and transmits wire-format DNS messages over HTTP between the proxy
   client and a proxy server, as follows:

   1.  The stub-resolver sends a DNS query (over UDP or TCP) to the
       proxy client.

   2.  The proxy client includes the DNS query as the message body of
       the HTTP request and launches a HTTP connection to proxy server.
       This may re-use an existing HTTP connection.

   3.  The proxy server take out the DNS query from HTTP message body,
       and sends it (either in UDP or TCP) to a configured real DNS
       recursive server.

   4.  when receiving the DNS response, the proxy server includes the
       DNS message in the response as a the message body of the HTTP
       response and sends it back to proxy client via the previous HTTP
       session.

   5.  The proxy client take out the DNS message from the HTTP response
       and sends it back to the stub-resolver via previous DNS
       transaction (either UDP or TCP).

   It is possible that these scenarios are mixed.  The server may speak
   DNS over HTTP directly and the client use a proxy, or the other way
   around.

   Note that the proxy client can be implemented listening to a loop-
   back address in the same host with stub-resolver.  The proxy server
   can be implemented as a caching server as well.  It is also possible
   to use the proxy server as a regular web server at the same time that
   is acting as a proxy server.

   The client may face a bootstrapping problem when the HTTP request
   needs to resolve the name of server and send the request to on IP
   address.One strategy is either use the IP directly or use another
   resolver (like the normal DHCP-supplied resolver) to lookup the IP of
   the server.

   May REMOVE BEFORE PUBLICATION: Note that the use case of this
   protocol is quite similar as[I-D.ietf-doh-dns-over-https] which is
   also design to prevent on-path network devices from interfering with
   DNS operations.  The difference is that the proxy usage of HTTP for
   DNS intentionally keep DNS decoupled from HTTP and consider the mixed
   scenarios with UDP or TCP transport on the path.  It is useful
   considering public proxy DNS service for many native stub-resolvers
   and the flexibility of configure far-end recursive servers.



Song, et al.           Expires September 21, 2018               [Page 4]

Internet-Draft          DNS wire-format over HTTP             March 2018


3.  DNS-over-HTTP Message Format

   DNS over HTTP is not tied to a specific version of HTTP, and should
   work with HTTP 1.1 [RFC7230] and HTTP/2 [RFC7540].  This section
   describes the details of the DNS over HTTP message format.

3.1.  The HTTP Request

   A DNS message is sent over HTTP from the client to the server via a
   properly-formed HTTP request using POST method request [section 4.3.3
   in RFC 7231 [RFC7231]].  If a GET method request is sent to the
   server, it optionally returns a human-readable page showing
   information targeted at users.

   Note that choosing POST (and not GET) as the request method for DNS
   wire-format over HTTP is mainly based on two reasons.  One is that
   the protocol is designed using HTTP as a tunnel-like technology
   carrying data from one side to another, not a web service with
   RESTful framework.  Another is that from the view of implementation
   some servers or middleboxes may ignore an undefined entity-body if
   using GET; and HTTP libraries have varying support for using GET with
   a payload.

   The target URI is provided explicitly by the services provider.
   Derived from the target URI, the request-target in request-line
   identifies the target resource upon which to apply the request.  To
   avoid URI conflicts and enhance interoperability, DNS wire-format
   over HTTP uses a well-known URI.  As defined in RFC 5785 [RFC5785],
   it begins with the characters "/.well-known/" and the name "dns-
   wireformat".  So the request-target for DNS wire-format over HTTP
   SHOULD be '/.well-known/dns-wireformat'.

   A DNS transaction over HTTP has no specific requirements for the
   transport protocol; developers can use any version of HTTP to
   accomplish the transaction.  But developers should be aware that HTTP
   1.1 [RFC7230] and HTTP/2 [RFC7540] do have differences in performance
   regarding multiplexing.  HTTP/2 is fully multiplexed, instead of
   ordered and blocking.  Because there is a general desire to achieve
   similar performance with DNS over UDP, the modern HTTP/2 is preferred
   for DNS over HTTP implementation.  Note that there should be no
   problem for advanced HTTP protocol in the future deployed for DNS
   over HTTP.

   The client API SHOULD include HTTP "Content-Type" request header
   which indicates the media type of the message.  The client API SHOULD
   also include HTTP "Accept" request header to say what type of content
   can be understood in response.  The media type used in this protocol
   are defined in Section 3.2.



Song, et al.           Expires September 21, 2018               [Page 5]

Internet-Draft          DNS wire-format over HTTP             March 2018


3.2.  DNS Wire Format

   The message body is the DNS wire format defined in RFC 1035
   [RFC1035].

   The media type is "application/dns-wireformat" with an optional
   parameters "proxy_transport".

   The optional parameter "proxy_transport" is either UDP or TCP, which
   is the proxy client's indication of how it received the underlying
   DNS query, and which the server will use when sending the query to
   the far-end DNS server.  This means if a stub DNS client asks for
   TCP, then that's what the far-end DNS server will see, and likewise
   for UDP.  There are some examples of HTTP "Content-Type" request
   header used in HTTP request of this protocol.

         content-type = application/dns-wireformat; proxy_transport=TCP
         content-type = application/dns-wireformat

   Note that if the optional parameter is missing in "Content-Type"
   request header, UDP will be taken as default transport for the proxy
   server sending query to far-end DNS server.

   Exposing the transport protocol of the query allows the HTTP server
   proxy to send DNS queries to the recursive resolver that look like
   those that the DNS client is sending to the client proxy.  If the
   stub resolver sent a UDP packet, then this allows the recursive
   resolver to implement the logic of truncating the packet properly,
   instead of requiring that the HTTP client proxy somehow manage that
   functionality.

   In scenario 1, for a stub resolver that connects directly via HTTP to
   the HTTP server proxy then proxy_transport should be set to TCP, as
   the entire response can always be delivered so truncation is never
   required.

   Note that DNS messages sent over TCP connections is prefixed with a
   two-byte length field which gives the message length [section 4.2.2
   in RFC 1035 [RFC1035]], excluding the two-byte length field.  This
   length field allows the low-level processing to assemble a complete
   message before beginning to parse it.  But when HTTP is used, the
   HTTP protocol itself keeps track of the length of the message, so
   there is no need to transmit the two-byte length field separately.

   That is to say when the proxy client generates HTTP request after
   receiving a DNS query over TCP or when the proxy server sends an HTTP
   response back once a response is received over TCP, it MUST NOT
   include the length field in the message sent.  The length of the



Song, et al.           Expires September 21, 2018               [Page 6]

Internet-Draft          DNS wire-format over HTTP             March 2018


   message sent by HTTP is only the size of the DNS message itself, and
   MUST NOT include this two-byte length header.

3.3.  The HTTP Response

   A proxy Server MUST be able to process "application/dns-wireformat"
   request messages and optional parameter "proxy_transport".  Each DNS
   request-response pair is matched to one HTTP request-response pair.

   Using POST method, this protocol expects no response cacheable in
   HTTP cache.  To be clear, DNS cache can be utilized in proxy client
   or proxy server in scenario 2 to enhance the performance.

   The DNS wire-format data defined in Section 3.2 are normal DNS
   message, so it MAY have one or more EDNS(0) extensions, one or more
   RRsets including DNSSEC Keys and signatures, or TC bit set if the DNS
   response is truncated.

   The status code [Section 6 of [RFC7231]], only reflects the status of
   the HTTP connection.  If the request has succeeded, the status code
   is 200 (OK).  If the request fails, the proxy server will supply an
   appropriate error code, typically 4xx (client error) if the client
   has provided a query that the server cannot understand for some
   reasons, or 5xx (server error) if some server-side problem prevented
   a query from succeeding.  For example the proxy Server SHOULD respond
   with HTTP status code 415 (Unsupported Media Type) upon receiving a
   media type it is unable to process.

   To be clear, a failure on the DNS side should result in a status code
   of 200 (OK) as long as the HTTP request is valid and can be answered.
   The DNS error will be returned via the DNS message over HTTP tunnel.
   It is worth to mention especially in scenario 1.

4.  Clarification on HTTP requirement

   May REMOVE BEFORE PUBLICATION: The protocol defined in this document
   view DNS and the proxy protocol are different layers without much
   specific coordination.  There is no sense that DNS has on the proxy
   layer.  But HTTP as a costumed tunnel technology for DNS in this case
   has some basic requirement which needs clarification.

   This protocol can be used with both http and https scheme URI
   [RFC7230].  Since reachability is the motive for this proposal, it
   has to work with, or without, TLS.

   HTTP/2 [RFC7540] are recommended but not mandatory.  HTTP/2 provides
   competitive performance by supporting reordering, multiplexing,
   priority, and header compression for DNS query and response.



Song, et al.           Expires September 21, 2018               [Page 7]

Internet-Draft          DNS wire-format over HTTP             March 2018


   This protocol SHOULD NOT be used with HTTP Cache.  No coordination
   should be made between the HTTP response freshness lifetime and TTL
   of DNS RRset

   Given the small payload of DNS query and response, it is not
   efficient asking compression on DNS message when transmitted via
   HTTP.  So the protocol SHOULD NOT use body encoding and compression.

5.  Security Considerations

   This protocol does not introduce any new security considerations
   since it is built on the DNS and HTTP protocols.

   Since this protocol transmits DNS messages, all of the security
   concerns that stub resolvers and recursive resolvers have with DNS
   messages apply.  However, since HTTP uses TCP as the underlying
   protocol, DNS reflection or amplification attacks are not possible.

   Since HTTP is used, all of the security concerns of HTTP are also
   present.

   Servers and clients SHOULD use TLS for communication.  It provides
   privacy and integrity for HTTP sessions.  If TLS is used, then all of
   the security concerns of TLS are also present.

   As specified in RFC 5246 [RFC5246], both the HTTP server and client
   can be authenticated or not authenticated.  Clients SHOULD
   authenticate the certificate of the HTTP server they connect to.  The
   DNS service providers can decide whether to authenticate the client
   side based on their own requirement for security and privacy.  For
   example, clients of an open resolver do not require authentication.

   Note that the ability to perform DNS queries in this way may allow
   users to bypass local DNS policy.  This is problematic in any
   environment where administrators need to enforce specific DNS
   behavior, such as an enterprise environment.  The protocol outlined
   here does not introduce any new capabilities in this area, but by
   creating a more standardized way of doing this it may cause
   operational problems for enterprise administrators.

6.  Privacy Considerations

   DNS over HTTP involves sending DNS requests, so is subject to most of
   the problems documented in RFC 7626 [RFC7626].  In particular the
   resolver handling the request sees the contents of every query and
   answer, as does any proxy involved on either the client or server
   side.




Song, et al.           Expires September 21, 2018               [Page 8]

Internet-Draft          DNS wire-format over HTTP             March 2018


   Use of TLS encryption will prevent attackers from seeing the plain
   DNS queries on the wire.  However, the warnings about privacy in RFC
   7858 [RFC7858] apply: "Even with encrypted messages, a well-
   positioned party may be able to glean certain details from an
   analysis of message timings and sizes."

   If a server requires a client-side certificate or other
   authentication, then this may allow an attacker to identify which
   user is active and when, if they gain access to the server logs.

   The use of DNS over HTTP may act as a strong signal to any
   surviellers that the user is attempting to bypass local DNS policy
   either to get different answers or hide their traffic.  Various
   techniques could be used to discover this, such as observing web
   traffic without any corresponding DNS traffic.

7.  IANA considerations

7.1.  Registration of application/dns-wireformat Media Type

    To: ietf-types@iana.org
    Subject: Registration of MIME media type
             application/dns-wireformat

    MIME media type name: application

    MIME subtype name: dns-wireformat

    Required parameters: n/a

    Optional parameters:

      proxy_transport: The optional parameter "proxy_transport"
                       is either UDP or TCP, which is the proxy
                       client's indication of how it received the
                       underlying DNS query.

    Encoding considerations: This is a binary format. The contents are a
    DNS message as defined in RFC 1035. The format used here is for DNS
    over UDP, which is the format defined in the diagrams in RFC 1035.

    Security considerations:  The security considerations for carrying
    this data are the same for carrying DNS without encryption.

    Interoperability considerations:  None.

    Published specification:  This document.




Song, et al.           Expires September 21, 2018               [Page 9]

Internet-Draft          DNS wire-format over HTTP             March 2018


    Applications that use this media type:
      Systems that want to ship DNS messages via HTTP.

    Additional information:

    Magic number(s):  n/a

    File extension(s):  n/a

    Macintosh file type code(s):  n/a

    Person & email address to contact for further information:
       Linjian Song, songlinjian@gmail.com

    Intended usage:  COMMON

    Restrictions on usage:  n/a

    Author:  Linjian Song, songlinjian@gmail.com

    Change controller:  IESG


7.2.  Registration of dns-wireformat Well-Known URI

   Registration for a new Well-Known URI: "dns-wireformat"

8.  Acknowledgments

   Thanks to Bob Harold, Paul Hoffman, Julian Reschke, and Erik Kline
   for review.

9.  References

   [DOTSE]    and , "DNSSEC Tests of Consumer Broadband Routers",
              February 2008,
              <http://www.iis.se/docs/Routertester_en.pdf>.

   [I-D.bortzmeyer-dns-json]
              Bortzmeyer, S., "JSON format to represent DNS data",
              draft-bortzmeyer-dns-json-01 (work in progress), February
              2013.

   [I-D.ietf-doh-dns-over-https]
              Hoffman, P. and P. McManus, "DNS Queries over HTTPS",
              draft-ietf-doh-dns-over-https-03 (work in progress),
              February 2018.




Song, et al.           Expires September 21, 2018              [Page 10]

Internet-Draft          DNS wire-format over HTTP             March 2018


   [I-D.mohan-dns-query-xml]
              Parthasarathy, M. and P. Vixie, "Representing DNS messages
              using XML", draft-mohan-dns-query-xml-00 (work in
              progress), September 2011.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <https://www.rfc-editor.org/info/rfc1035>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008, <https://www.rfc-
              editor.org/info/rfc5246>.

   [RFC5625]  Bellis, R., "DNS Proxy Implementation Guidelines",
              BCP 152, RFC 5625, DOI 10.17487/RFC5625, August 2009,
              <https://www.rfc-editor.org/info/rfc5625>.

   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, "Defining Well-Known
              Uniform Resource Identifiers (URIs)", RFC 5785,
              DOI 10.17487/RFC5785, April 2010, <https://www.rfc-
              editor.org/info/rfc5785>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014, <https://www.rfc-
              editor.org/info/rfc7231>.

   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015, <https://www.rfc-
              editor.org/info/rfc7540>.

   [RFC7626]  Bortzmeyer, S., "DNS Privacy Considerations", RFC 7626,
              DOI 10.17487/RFC7626, August 2015, <https://www.rfc-
              editor.org/info/rfc7626>.

   [RFC7858]  Hu, Z., Zhu, L., Heidemann, J., Mankin, A., Wessels, D.,
              and P. Hoffman, "Specification for DNS over Transport
              Layer Security (TLS)", RFC 7858, DOI 10.17487/RFC7858, May
              2016, <https://www.rfc-editor.org/info/rfc7858>.





Song, et al.           Expires September 21, 2018              [Page 11]

Internet-Draft          DNS wire-format over HTTP             March 2018


   [SAC035]   ICANN Security and Stability Advisory Committee, "DNSSEC
              Impact on Broadband Routers and Firewalls", 2008.

Authors' Addresses

   Linjian Song
   Beijing Internet Institute
   2nd Floor, Building 5, No.58 Jing Hai Wu Lu, BDA
   Beijing  100176
   P. R. China

   Email: songlinjian@gmail.com
   URI:   http://www.biigroup.com/


   Paul Vixie
   TISF
   11400 La Honda Road
   Woodside, California  94062
   US

   Email: vixie@tisf.net
   URI:   http://www.redbarn.org/


   Shane Kerr
   Antoon Coolenlaan 41
   Uithoorn  1422 GN
   NL

   Email: shane@time-travellers.org




















Song, et al.           Expires September 21, 2018              [Page 12]
